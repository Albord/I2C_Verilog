/*
	Autor: Albert Espiña Rojas
	Modulo: I2C_SLAVE_MEMORY
	Modulo de memoria. Podemos acceder y guardar datos. 
	El modulo tiene como parametro, el tamaño de la dirección de memoria, el número de direcciónes ,es decir el número de datos
	y el número de bytes en los datos

*/

module I2C_SLAVE_ADDRESS_MATCH #( parameter ADDRESSLENGTH, parameter LENGTH, parameter ADDRESSNUM, parameter NBYTES)(Clk, Rst, RoW, Enable, AddressWant, AddressList, Data, Buffer);
	input Clk;
 	input Rst; 
	input Enable; 
	input Mode;
	input [LENGTH - 1: 0]InputAddress;

	integer LocalAddressID;
	output reg [LENGTH - 1: 0]AddressFound;
	reg [(LENGTH - 1)*MaxAddress: 0]AddressList;

	input [LENGTH - 1: 0]AddressWant;//Dirección de memoria que está solicitando el master


always @(AddressWant) begin //Cada vez que cambia la dirección de memória, comprovamos si está disponible
	
end

always @(posedge Enable)//Si se activa el enable, es cuando transferimos los datos del buffer a la memoria
begin
	if (Mode) begin //Modo transferencia, intercambiamos datos entre el buffer y los datos de la memoria
		if (RorW) Buffer <= Data[ByteCounter*(8 + 1):ByteCounter*8];//modo escritura, cargamos datos en el buffer
		else Data[LocalAddressID*8*NBYTES + ByteCounter*(8 + 1):LocalAddressID*8*NBYTES*ByteCounter*8] <= Buffer;
		if (ByteCounter < NBYTES - 1) ByteCounter = ByteCounter + 1;
	end
	else begin //El enable también puede ser para ver si se dispone de una dirección de memoria
		AddressFound = 1'b0;
		for(LocalAddressID = 0; (LocalAddressID < ADDRESSNUM) ||  !AddressFound; i++) begin
			if (AddressList[ADDRESSLENGTH*(LocalAddressID+1):ADDRESSLENGTH*(LocalAddressID) == AddressWant) AddressFound = 1'b1;
		end

	end


end

endmodule